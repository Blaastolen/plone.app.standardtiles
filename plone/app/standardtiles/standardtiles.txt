This package registers a set of standard tiles, including tiles for
the page layout like the footer, site actions or the search box, tiles
for the headers like stylesheets and javascript resource registries
output, and application tiles like the image, video or proxy tiles.

Here we present some of them.

First, we set up a browser instance and get Manager privileges::

    >>> from plone.testing.z2 import Browser
    >>> app = layer['app']
    >>> browser = Browser(app)
    >>> browser.handleErrors = False
    >>> portal = layer['portal']
    >>> portalURL = portal.absolute_url()

    >>> from plone.app.testing import setRoles
    >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
    >>> browser.addHeader('Authorization', 'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
    >>> setRoles(portal, TEST_USER_NAME, ['Manager'])

    >>> import transaction
    >>> transaction.commit() # make the browser see this role

We also keep another testbrowser handy for testing how tiles are rendered if
you're not logged in::

    >>> unprivileged_browser = Browser(app)

Layout tiles
-------------

Layout tiles like the colophon don't need any config parameters::

    >>> unprivileged_browser.open(portalURL+ '/@@plone.app.standardtiles.colophon/colophon-tile')
    >>> unprivileged_browser.contents
    '...This site was built using the Plone Open Source CMS/WCM...'

Footer tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.footer')
    >>> unprivileged_browser.contents
    '...id="portal-footer"...and the Plone logo are registered trademarks of the...' 

Site actions tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.site_actions')
    >>> unprivileged_browser.contents
    '...id="portal-siteactions"...'

Empty analytics tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.analytics')
    >>> unprivileged_browser.contents
    '<html><body></body></html>'

Now insert an example Google Analytics script::

    >>> snippet = "<script type='text/javascript'> var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-XXXXX-X']); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();</script>"
    >>> from Products.CMFCore.utils import getToolByName
    >>> ptool = getToolByName(portal, "portal_properties")
    >>> ptool.site_properties.webstats_js = snippet
    >>> transaction.commit()
    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.analytics')
    >>> snippet in unprivileged_browser.contents
    True

Skip links tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.skip_links')
    >>> unprivileged_browser.contents
    '...class="hiddenStructure"...Skip to content...Skip to navigation...'

Personal bar::
    
    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.personal_bar')
    >>> unprivileged_browser.contents
    '...id="portal-personaltools-wrapper"...'

Login tile
----------

For a logged-in user, the login tile should be empty::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.login')
    >>> browser.contents
    '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml">\n<body>\n\n    \n</body>\n</html>\n'

When we are not logged in, we should get the form::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.login')
    >>> unprivileged_browser.contents
    '...id="loginform"...'

Video tile
----------

The video tile is a persistent tile which takes a YouTube video URL
and displays the associated video::

    >>> browser.open(portalURL+ '/@@add-tile/plone.app.standardtiles.video/video-tile')
    >>> browser.getControl(name='youtubeURL').value = 'http://www.youtube.com/watch?v=ayPKvFNz8aE'
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.video/video-tile')
    >>> browser.contents
    '<html><body><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/ayPKvFNz8aE&hl=en_GB&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/ayPKvFNz8aE&hl=en_GB&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object></body></html>'


Proxy tile
-----------

The proxy tile takes the int id of a content object in the site and
displays the result of calling ``@@proxy-view`` on it. The default
``@@proxy-view``, registered for all interfaces, renders the contents
of the ``#content`` HTML element of the default view of the object.

We create a Document object in the portal for it to be referenced, and
set its title and description::

    >>> dummy = portal.invokeFactory('Document', 'aDocument',
    ...                              title='A document',
    ...                              description="A description")
    >>> document = portal['aDocument']
    >>> transaction.commit()

Using the proxy tile with this document exhibits the default behavior::

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.proxy/proxy-tile')
    >>> browser.getControl(name='contentId.widgets.query').value = 'aDocument'
    >>> browser.getControl(name='contentId.buttons.search').click()
    >>> contentId = browser.getControl(name="contentId:list")
    >>> contentId.displayOptions
    ['A document']
    >>> contentId.getControl('A document').selected = True
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.proxy/proxy-tile')
    >>> browser.contents
    '...id="content"...A document...A description...'

If we register a view with the name ``@@proxy-view`` for a more
specific interface, it will be used instead::

    >>> from zope.interface import Interface
    >>> from Products.ATContentTypes.interfaces.document import IATDocument
    >>> from zope.component import adapts, provideAdapter
    >>> from Products.Five.browser import BrowserView
    >>> from zope.publisher.interfaces.browser import IBrowserView

    >>> class ProxyView(BrowserView):
    ...     adapts(IATDocument, Interface)
    ...     def __call__(self):
    ...         return "Custom proxy view."
    >>> provideAdapter(ProxyView, provides=IBrowserView, name="proxy-view")

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.proxy/proxy-tile')
    >>> browser.contents
    'Custom proxy view.'


Navigation tree tile
---------------------

The navigation tree tile displays a navigation tree for the context
where it's inserted and take no configuration parameters.

Rendering this tile in the site root should show the document we
created before::

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.navigation/navigation-tile')
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.navigation/navigation-tile')
    >>> print browser.contents
    <body>
      <ul id="navigation" class="navigation">
        <li>
          <a href="http://nohost/plone/aDocument" class="state-missing-value" title="A description">
            A document <em class="icon document">(Page)</em></a>
        </li>
      </ul>
    </body>


Attachment tile
----------------

This persistent tile renders a link pointing to a file stored in the
tile data itself.

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.attachment/attachment-tile')
    >>> upload = browser.getControl(name='fileObj')
    >>> import cStringIO
    >>> upload.add_file(cStringIO.StringIO('File contents'), 'text/plain', 'textfile.txt')
    >>> browser.getControl(name='linkText').value = 'Link text.'
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.attachment/attachment-tile')
    >>> browser.contents
    '<html><body><a href="http://nohost/plone/@@plone.app.standardtiles.attachment/attachment-tile/@@download/textfile.txt">Link text.</a></body></html>'

If not link text is supplied, the name of the file is used instead.

    >>> browser.open(portalURL + '/@@edit-tile/plone.app.standardtiles.attachment/attachment-tile')
    >>> browser.getControl(name='linkText').value = ''
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.attachment/attachment-tile')
    >>> browser.contents
    '<html><body><a href="http://nohost/plone/@@plone.app.standardtiles.attachment/attachment-tile/@@download/textfile.txt">textfile.txt</a></body></html>'
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.attachment/attachment-tile/@@download')


Content listing tile
--------------------
Lets create some content so we can use this with the tile. Adding a dexterity
page is tedious (not installed), for now an ATDocument is good.

    >>> browser.open(portalURL)
    >>> browser.getLink('Folder').click()
    >>> browser.getControl('Title').value = 'My folder'
    >>> browser.getControl('Save').click()
    >>> browser.url
    'http://nohost/plone/my-folder/'

    >>> browser.open('http://nohost/plone/my-folder/createObject?type_name=Document')
    >>> browser.getControl('Title').value = 'My first page'
    >>> browser.getControl('Save').click()
    >>> browser.url
    'http://nohost/plone/my-folder/my-first-page'

    >>> browser.open('http://nohost/plone/my-folder/createObject?type_name=Document')
    >>> browser.getControl('Title').value = 'My second page'
    >>> browser.getControl('Save').click()
    >>> browser.url
    'http://nohost/plone/my-folder/my-second-page'

    >>> folder = getattr(portal, 'my-folder')
    >>> folder.objectIds()
    [...'my-first-page', 'my-second-page'...]

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.contentlisting/contentlisting-tile')
    >>> browser.getControl(name='query.i:records').value = 'SearchableText'
    >>> browser.getControl(name='query.v:records').value = 'first'
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.contentlisting/contentlisting-tile')
    >>> browser.contents
    '...<h2 class="searchResultsHeading"><span>Search results</span> <span class="discreet"> — <span>1 item matching your search terms</span></span></h2>...'
    >>> browser.contents
    '...<a href="http://nohost/plone/my-folder/my-first-page" class="private">My first page</a>...'
    

    >>> browser.open(portalURL + '/@@edit-tile/plone.app.standardtiles.contentlisting/contentlisting-tile')
    >>> browser.getControl(name='query.i:records').value = 'SearchableText'
    >>> browser.getControl(name='query.v:records').value = 'my'
    >>> browser.contents
    '...2 items matching your search terms...'
    >>> browser.getControl(name='query.i:records').value = 'SearchableText'
    >>> browser.getControl(name='query.v:records').value = 'second'
    >>> browser.contents
    '...1 items matching your search terms...'


Calendar tile
-------------

This tile shows a calendar.

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.calendar/calendar-tile')
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.calendar/calendar-tile')
    >>> browser.contents
    '...<dl class="calendar-tile"...'

If we create a new event the cache should be invalidated::

    >>> tile = portal.unrestrictedTraverse(
    ...     '@@plone.app.standardtiles.calendar/calendar-tile')
    >>> 'ACTUAL_URL' not in portal.REQUEST.keys()
    True
    >>> portal.REQUEST['ACTUAL_URL'] = portalURL + \
    ...     '/@@plone.app.standardtiles.calendar/calendar-tile'
    >>> prior_html = tile()
    >>> from DateTime import DateTime

Lets a event in the last day of the current month::

    >>> year, month = tile.getYearAndMonthToDisplay()
    >>> year, month = tile.getNextMonth(year, month)
    >>> last_day_month = DateTime('%s/%s/1' % (year, month)) - 1
    >>> hour = 1 / 24.0
    >>> portal.invokeFactory('Event', 'e1',
    ...     startDate=last_day_month + 23 * hour,
    ...     endDate=last_day_month + 23.5 * hour)
    'e1'
    >>> portal.e1
    <ATEvent at /plone/e1>

We also need to publish it. But the default workflow may not
be set beause of a unknown problem with the test:

    >>> portal.portal_workflow.setDefaultChain('simple_publication_workflow')
    >>> portal.portal_workflow.doActionFor(portal.e1, 'publish')
    >>> portal.portal_workflow.getInfoFor(portal.e1, 'review_state')
    'published'

Rendering the tile again should result in different html:

     >>> assert prior_html != tile(), "Cache key wasn't invalidated"
     >>> 'class="event"' in tile()
     True
