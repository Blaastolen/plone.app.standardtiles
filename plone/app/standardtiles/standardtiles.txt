This package registers a set of standard tiles, including tiles for
the page layout like the footer, site actions or the search box, tiles
for the headers like stylesheets and javascript resource registries
output, and application tiles like the image, video or proxy tiles.

Here we present some of them.

First, we set up a browser instance and get Manager privileges::

    >>> from plone.testing.z2 import Browser
    >>> app = layer['app']
    >>> browser = Browser(app)
    >>> browser.handleErrors = False
    >>> portal = layer['portal']
    >>> portalURL = portal.absolute_url()

    >>> from plone.app.testing import setRoles
    >>> from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD
    >>> browser.addHeader('Authorization', 'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))
    >>> setRoles(portal, TEST_USER_NAME, ['Manager'])

    >>> import transaction
    >>> transaction.commit() # make the browser see this role

We also keep another testbrowser handy for testing how tiles are rendered if
you're not logged in::

    >>> unprivileged_browser = Browser(app)

Layout tiles
-------------

Layout tiles like the colophon don't need any config parameters::

    >>> unprivileged_browser.open(portalURL+ '/@@plone.app.standardtiles.colophon/colophon-tile')
    >>> unprivileged_browser.contents
    '...This site was built using the Plone Open Source CMS/WCM...'

Head title tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.headtitle')
    >>> unprivileged_browser.contents
    '...<title>Plone site</title>...'

Footer tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.footer')
    >>> unprivileged_browser.contents
    '...id="portal-footer"...and the Plone logo are registered trademarks of the...'

Site actions tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.site_actions')
    >>> unprivileged_browser.contents
    '...id="portal-siteactions"...'

Empty analytics tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.analytics')
    >>> unprivileged_browser.contents
    '<html><body></body></html>'

Now insert an example Google Analytics script::

    >>> snippet = "<script type='text/javascript'> var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-XXXXX-X']); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })();</script>"
    >>> from Products.CMFCore.utils import getToolByName
    >>> ptool = getToolByName(portal, "portal_properties")
    >>> ptool.site_properties.webstats_js = snippet
    >>> transaction.commit()
    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.analytics')
    >>> snippet in unprivileged_browser.contents
    True

Skip links tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.skip_links')
    >>> unprivileged_browser.contents
    '...class="hiddenStructure"...Skip to content...Skip to navigation...'

Test the personal bar as Anonymous::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.personal_bar')
    >>> unprivileged_browser.contents
    '...id="portal-personaltools-wrapper"...<a...Log in</a>...'

Also test the personal bar as a logged-in user::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.personal_bar')
    >>> browser.contents
    '...id="portal-personaltools-wrapper"...<a...Log out</a>...'

Logo tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.logo')
    >>> unprivileged_browser.contents
    '...id="portal-logo"...'

Global sections::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.global_sections')
    >>> unprivileged_browser.contents
    '...id="portal-globalnav"...'

Path bar tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.path_bar')
    >>> unprivileged_browser.contents
    '...id="portal-breadcrumbs"...'

Keywords tile::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.keywords')
    >>> unprivileged_browser.contents
    '...id="category"...'

Content views tile (test as logged in user)::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.contentviews')
    >>> browser.contents
    '...id="content-views"...'

Content actions tile (test as logged in user)::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.contentactions')
    >>> browser.contents
    '...id="contentActionMenus"...'

Document byline tile (test as logged in user)::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.document_byline')
    >>> browser.contents
    '...id="plone-document-byline"...'

Table of contents tile::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.tableofcontents')
    >>> browser.contents
    '...id="document-toc"...'

Language selector tile
-----------------------

The language selector tile shows a list of languages available in the
site. Since the language selection depends on cookies, this tile will
be only available if the corresponding setting is set in the
portal_languages tool.

By default, this setting set and the selector shows up::

    >>> lt = getToolByName(portal, 'portal_languages')
    >>> lt.use_cookie_negotiation
    True

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.languageselector')
    >>> browser.contents
    '...language-en...'

However, anonymous won't see the selector by default:

    >>> unprivileged_browser.open('/@@plone.app.standardtiles.languageselector')
    >>> 'language-en' in unprivileged_browser.contents
    False

But the ``always_show_selector`` flag is still obeyed::

    >>> lt.always_show_selector = True
    >>> transaction.commit()
    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.languageselector')
    >>> unprivileged_browser.contents
    '...language-en...'

Adding supported languages will show them in the tile::

    >>> lt.addSupportedLanguage('ca')
    >>> transaction.commit()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.languageselector')
    >>> browser.contents
    '...language-en...language-ca...'

Login tile
----------

For a logged-in user, the login tile should be empty::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.login')
    >>> browser.contents
    '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">\n<html xmlns="http://www.w3.org/1999/xhtml">\n<body>\n\n    \n</body>\n</html>\n'

When we are not logged in, we should get the form::

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.login')
    >>> unprivileged_browser.contents
    '...id="loginform"...'

By default, we should not have the "register" link in there::

But if we enable self-registration, it should show up::

    >>> from plone.app.controlpanel.security import ISecuritySchema
    >>> security_settings = ISecuritySchema(portal)
    >>> security_settings.set_enable_self_reg(True)
    >>> transaction.commit()
    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.login')
    >>> unprivileged_browser.contents
    '...<a...@@register...New user...</a>...'


Configlets tile
---------------

The configlets tile renders a list of the available config dialogs::

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.configlets')
    >>> browser.contents
    '...Site Setup...Add-ons...Calendar...Collections...'

Video tile
----------

The video tile is a persistent tile which takes a YouTube video URL
and displays the associated video::

    >>> browser.open(portalURL+ '/@@add-tile/plone.app.standardtiles.video/video-tile')
    >>> browser.getControl(name='youtubeURL').value = 'http://www.youtube.com/watch?v=ayPKvFNz8aE'
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.video/video-tile')
    >>> browser.contents
    '<html><body><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/ayPKvFNz8aE&hl=en_GB&fs=1&"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/ayPKvFNz8aE&hl=en_GB&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></embed></object></body></html>'


Proxy tile
-----------

The proxy tile takes the int id of a content object in the site and
displays the result of calling ``@@proxy-view`` on it. The default
``@@proxy-view``, registered for all interfaces, renders the contents
of the ``#content`` HTML element of the default view of the object.

We create a Document object in the portal for it to be referenced, and
set its title and description::

    >>> dummy = portal.invokeFactory('Document', 'aDocument',
    ...                              title='A document',
    ...                              description="A description")
    >>> document = portal['aDocument']
    >>> transaction.commit()

Using the proxy tile with this document exhibits the default behavior::

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.proxy/proxy-tile')
    >>> browser.getControl(name='contentId.widgets.query').value = 'aDocument'
    >>> browser.getControl(name='contentId.buttons.search').click()
    >>> contentId = browser.getControl(name="contentId:list")
    >>> contentId.displayOptions
    ['A document']
    >>> contentId.getControl('A document').selected = True
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.proxy/proxy-tile')
    >>> browser.contents
    '...id="content"...A document...A description...'

If we register a view with the name ``@@proxy-view`` for a more
specific interface, it will be used instead::

    >>> from zope.interface import Interface
    >>> from Products.ATContentTypes.interfaces.document import IATDocument
    >>> from zope.component import adapts, provideAdapter
    >>> from Products.Five.browser import BrowserView
    >>> from zope.publisher.interfaces.browser import IBrowserView

    >>> class ProxyView(BrowserView):
    ...     adapts(IATDocument, Interface)
    ...     def __call__(self):
    ...         return "Custom proxy view."
    >>> provideAdapter(ProxyView, provides=IBrowserView, name="proxy-view")

    >>> browser.open(portalURL + '/@@plone.app.standardtiles.proxy/proxy-tile')
    >>> browser.contents
    'Custom proxy view.'


Image tile
-----------

The image tile lets you select an existing image or upload a new one
to insert into the page. By default, the tile looks for and uploads
images to a folder named ``images`` at the root of the plone
site. This is can be configured changing the ``images_repo_path``
property of the ``IStandardTilesSettings`` interface in the registry.

We first create this folder to be able to upload images to it::

    >>> portal.invokeFactory('Folder', 'images', title='Images')
    'images'
    >>> images = portal['images']
    >>> transaction.commit()

We now create an image tile with an uploaded image::

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.image/image-tile')
    >>> browser.getControl(name='imageId.method').getControl(value='upload').selected = True
    >>> upload = browser.getControl(name='form.widgets.image_upload')
    >>> import cStringIO
    >>> upload.add_file(cStringIO.StringIO('Image contents'), 'image/jpeg', 'image.jpg')
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.image/image-tile')
    >>> browser.contents
    '<html><body><img src="http://nohost/plone/images/image.jpg" alt="" /></body></html>'

Note that, since we have not specified an alternative text, the
``alt`` attribute of the ``img`` tag is empty (but present).

The image has been uploaded to the ``images`` folder created above::

    >>> images.keys()
    ['image.jpg']

If we edit the tile now, our image should be selected in the dropdown
of existing images::

    >>> browser.open(portalURL + '/@@edit-tile/plone.app.standardtiles.image/image-tile')
    >>> imageId = browser.getControl(name='imageId:list')
    >>> imageId.getControl('image.jpg').selected
    True

Entering an alternative text will display it properly::

    >>> browser.getControl(name='altText').value = "An image"
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.image/image-tile')
    >>> browser.contents
    '<html><body><img src="http://nohost/plone/images/image.jpg" alt="An image" /></body></html>'


Attachment tile
----------------

This persistent tile renders a link pointing to a file stored in the
tile data itself.

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.attachment/attachment-tile')
    >>> browser.getControl(name='files.buttons.add').click()
    >>> upload = browser.getControl(name='files.0')
    >>> import cStringIO
    >>> upload.add_file(cStringIO.StringIO('File contents'), 'text/plain', 'textfile.txt')
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.attachment/attachment-tile')
    >>> html = browser.contents
    >>> html
    '...<a href="http://nohost/plone/@@plone.app.standardtiles.attachment/attachment-tile/@@download/textfile.txt">...'
    >>> html
    '...<img src="http://nohost/plone/txt.png" alt="" />...'
    >>> html
    '...textfile.txt...'
    >>> html
    '...Plain Text...'
    >>> html
    '...0 KB...'


Calendar tile
-------------

This tile shows a calendar.

    >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.calendar/calendar-tile')
    >>> browser.getControl(label='Save').click()
    >>> browser.open(portalURL + '/@@plone.app.standardtiles.calendar/calendar-tile')
    >>> browser.contents
    '...<dl class="calendar-tile"...'

If we create a new event the cache should be invalidated::

    >>> tile = portal.unrestrictedTraverse(
    ...     '@@plone.app.standardtiles.calendar/calendar-tile')
    >>> 'ACTUAL_URL' not in portal.REQUEST.keys()
    True
    >>> portal.REQUEST['ACTUAL_URL'] = portalURL + \
    ...     '/@@plone.app.standardtiles.calendar/calendar-tile'
    >>> prior_html = tile()
    >>> from DateTime import DateTime

Lets a event in the last day of the current month::

    >>> year, month = tile.getYearAndMonthToDisplay()
    >>> year, month = tile.getNextMonth(year, month)
    >>> last_day_month = DateTime('%s/%s/1' % (year, month)) - 1
    >>> hour = 1 / 24.0
    >>> portal.invokeFactory('Event', 'e1',
    ...     startDate=last_day_month + 23 * hour,
    ...     endDate=last_day_month + 23.5 * hour)
    'e1'
    >>> portal.e1
    <ATEvent at /plone/e1>

We also need to publish it. But the default workflow may not
be set beause of a unknown problem with the test:

    >>> portal.portal_workflow.setDefaultChain('simple_publication_workflow')
    >>> portal.portal_workflow.doActionFor(portal.e1, 'publish')
    >>> portal.portal_workflow.getInfoFor(portal.e1, 'review_state')
    'published'

Rendering the tile again should result in different html:

     >>> assert prior_html != tile(), "Cache key wasn't invalidated"
     >>> 'class="event"' in tile()
     True


Searchbox tile
--------------

    >>> unprivileged_browser.open(portalURL + '/@@plone.app.standardtiles.searchbox')
    >>> unprivileged_browser.contents
    '...id="portal-searchbox"...'


Next previous tile
------------------

The next previous tile shows a next and a previous button if there is
a next or a previous object. It can be activated by checking the checkbox
in the schema (edit).

Let's add a folder and add three pages for testing the tile::

    >>> portal.invokeFactory('Folder', 'next-previous-folder',
    ...     title='Next Previous folder')
    'next-previous-folder'
    >>> folder = portal.get('next-previous-folder')

    >>> folder.invokeFactory('Document', 'page-one', title='Page one')
    'page-one'
    >>> page1 = folder.get('page-one')

    >>> folder.invokeFactory('Document', 'page-two', title='Page two')
    'page-two'
    >>> page2 = folder.get('page-two')

    >>> folder.invokeFactory('Document', 'page-three', title='Page three')
    'page-three'
    >>> page3 = folder.get('page-three')


Test the tile on the first page. It should not be there since next
previous is still disabled (default configuration).

    >>> page1.restrictedTraverse('@@plone_nextprevious_view').enabled()
    False

    >>> tile_view = '@@plone.app.standardtiles.nextprevious'

    >>> html = page1.restrictedTraverse(tile_view)()
    >>> assert '<div' not in html, 'Next / previous is disabled ' + \
    ...     'but the tile has contents.'

Then we activate next previous and we should see a next-link when
rendering the tile on the first page::

    >>> folder.getField('nextPreviousEnabled').set(folder, True)
    >>> page1.restrictedTraverse('@@plone_nextprevious_view').enabled()
    True

    >>> html = page1.restrictedTraverse(tile_view)()
    >>> assert '<div' in html, 'Next / previous is enabled ' + \
    ...     'but the tiles is empty'
    >>> assert 'class="next"' in html, 'Expected "next" link'
    >>> assert 'class="previous"' not in html, 'Didn\'t expect "previous" link'

    >>> html = page2.restrictedTraverse(tile_view)()
    >>> assert '<div' in html, 'Next / previous is enabled ' + \
    ...     'but the tiles is empty'
    >>> assert 'class="next"' in html, 'Expected "next" link'
    >>> assert 'class="previous"' in html, 'Expected "previous" link'

    >>> html = page3.restrictedTraverse(tile_view)()
    >>> assert '<div' in html, 'Next / previous is enabled ' + \
    ...     'but the tiles is empty'
    >>> assert 'class="next"' not in html, 'Didn\'t expect "next" link'
    >>> assert 'class="previous"' in html, 'Expected "previous" link'

Cleanup::

    >>> portal.manage_delObjects(['next-previous-folder'])


Document actions tile
---------------------

The document actions tile just lists the actions registered
in the document_actions category.

Make shure at least the print action is visible::

    >>> from Products.CMFCore.utils import getToolByName
    >>> action_tool = getToolByName(portal, 'portal_actions')
    >>> print_action = action_tool.document_actions.get('print')
    >>> print_action
    <Action at /plone/portal_actions/document_actions/print>
    >>> print_action.visible = True

    >>> view_name = '@@plone.app.standardtiles.document_actions'
    >>> html = portal.restrictedTraverse(view_name)()
    >>> assert 'id="document-action-print"' in html, \
    ...     'Expected document action to be visible'


Content listing tile
--------------------
Lets create some content so we can use this with the tile. Adding a dexterity
page is tedious (not installed), for now an ATDocument is good enough.

   >>> browser.open(portalURL)
   >>> browser.getLink('Folder').click()
   >>> browser.getControl('Title').value = 'My folder'
   >>> browser.getControl('Save').click()
   >>> browser.url
   'http://nohost/plone/my-folder/'

   >>> browser.open('http://nohost/plone/my-folder/createObject?type_name=Document')
   >>> browser.getControl('Title').value = 'My first page'
   >>> browser.getControl('Save').click()
   >>> browser.url
   'http://nohost/plone/my-folder/my-first-page'

   >>> browser.open('http://nohost/plone/my-folder/createObject?type_name=Document')
   >>> browser.getControl('Title').value = 'My second page'
   >>> browser.getControl('Save').click()
   >>> browser.url
   'http://nohost/plone/my-folder/my-second-page'

   >>> folder = getattr(portal, 'my-folder')
   >>> folder.objectIds()
   [...'my-first-page', 'my-second-page'...]

   >>> browser.open(portalURL + '/@@add-tile/plone.app.standardtiles.contentlisting/contentlisting-tile')
   >>> browser.getControl(name='addindex').value = ['SearchableText']
   >>> browser.getControl(name='form.button.addcriteria').click()
   >>> browser.getControl(name='addoperator').value = ['plone.app.collection.operation.string.contains']
   >>> browser.getControl(name='form.button.addcriteria').click()
   >>> browser.getControl(name='query.v:records').value = 'first'
   >>> browser.getControl(name='buttons.save').click()
   >>> browser.open(portalURL + '/@@plone.app.standardtiles.contentlisting/contentlisting-tile')
   >>> browser.contents
   '...<span>1 items matching your search terms</span>...'
   >>> browser.contents
   '...<a href="http://nohost/plone/my-folder/my-first-page" class="link-location">/plone/my-folder/my-first-page</a>...'
